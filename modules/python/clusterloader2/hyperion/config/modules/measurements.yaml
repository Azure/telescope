{{$action := .action}} # start, gather

# Feature gates
{{$podStartupLatencyThreshold := DefaultParam .CL2_POD_STARTUP_LATENCY_THRESHOLD "15s"}}
{{$ENABLE_VIOLATIONS_FOR_API_CALL_PROMETHEUS_SIMPLE := DefaultParam .CL2_ENABLE_VIOLATIONS_FOR_API_CALL_PROMETHEUS_SIMPLE true}}
{{$NETWORK_LATENCY_THRESHOLD := DefaultParam .CL2_NETWORK_LATENCY_THRESHOLD "0s"}}
{{$PROBE_MEASUREMENTS_PING_SLEEP_DURATION := DefaultParam .CL2_PROBE_MEASUREMENTS_PING_SLEEP_DURATION "1s"}}

# Probe measurements shared parameter
{{$PROBE_MEASUREMENTS_CHECK_PROBES_READY_TIMEOUT := DefaultParam .CL2_PROBE_MEASUREMENTS_CHECK_PROBES_READY_TIMEOUT "15m"}}

steps:
  - name: {{$action}} Additional Measurements
    measurements:
      - Identifier: APIResponsivenessPrometheus
        Method: APIResponsivenessPrometheus
        Params:
          action: {{$action}}
          enableViolations: {{$ENABLE_VIOLATIONS_FOR_API_CALL_PROMETHEUS_SIMPLE}}
          useSimpleLatencyQuery: true
      - Identifier: PodStartupLatency
        Method: PodStartupLatency
        Params:
          action: {{$action}}
          labelSelector: group = {{.group}}
          threshold: {{$podStartupLatencyThreshold}}
      - Identifier: InClusterNetworkLatency
        Method: InClusterNetworkLatency
        Params:
          action: {{$action}}
          checkProbesReadyTimeout: {{$PROBE_MEASUREMENTS_CHECK_PROBES_READY_TIMEOUT}}
          replicasPerProbe: {{AddInt 2 (DivideInt .Nodes 100)}}
          pingSleepDuration: {{$PROBE_MEASUREMENTS_PING_SLEEP_DURATION}}
          threshold: {{$NETWORK_LATENCY_THRESHOLD}}
      - Identifier: TerminatedWatchesMetrics
        Method: GenericPrometheusQuery
        Params:
          action: {{$action}}
          metricName: Terminated Watches
          metricVersion: v1
          unit: count
          dimensions:
          - resource
          queries:
          - name: Terminated watches
            query: sum(increase(apiserver_terminated_watchers_total[%v:])) by (resource)
      - Identifier: ApiserverAvgCPUUsage
        Method: GenericPrometheusQuery
        Params:
          action: {{$action}}
          metricName: Apiserver Average CPU Usage
          metricVersion: v1
          unit: cpu
          enableViolations: true
          queries:
          - name: Perc99
            query: quantile(0.99, avg_over_time(rate(process_cpu_seconds_total{endpoint="apiserver"}[1m])[%v:]))
          - name: Perc90
            query: quantile(0.90, avg_over_time(rate(process_cpu_seconds_total{endpoint="apiserver"}[1m])[%v:]))
          - name: Perc50
            query: quantile(0.50, avg_over_time(rate(process_cpu_seconds_total{endpoint="apiserver"}[1m])[%v:]))
      - Identifier: ApiserverMaxCPUUsage
        Method: GenericPrometheusQuery
        Params:
          action: {{$action}}
          metricName: Apiserver Max CPU Usage
          metricVersion: v1
          unit: cpu
          enableViolations: true
          queries:
          - name: Perc99
            query: quantile(0.99, max_over_time(rate(process_cpu_seconds_total{endpoint="apiserver"}[1m])[%v:]))
          - name: Perc90
            query: quantile(0.90, max_over_time(rate(process_cpu_seconds_total{endpoint="apiserver"}[1m])[%v:]))
          - name: Perc50
            query: quantile(0.50, max_over_time(rate(process_cpu_seconds_total{endpoint="apiserver"}[1m])[%v:]))
      - Identifier: ApiserverAvgMemUsage
        Method: GenericPrometheusQuery
        Params:
          action: {{$action}}
          metricName: Apiserver Avg Memory Usage
          metricVersion: v1
          unit: MB
          enableViolations: true
          queries:
          - name: Perc99
            query: quantile(0.99, avg_over_time(process_resident_memory_bytes{endpoint="apiserver"}[%v:]) / 1024 / 1024)
          - name: Perc90
            query: quantile(0.90, avg_over_time(process_resident_memory_bytes{endpoint="apiserver"}[%v:]) / 1024 / 1024)
          - name: Perc50
            query: quantile(0.5, avg_over_time(process_resident_memory_bytes{endpoint="apiserver"}[%v:]) / 1024 / 1024)
      - Identifier: ApiserverMaxMemUsage
        Method: GenericPrometheusQuery
        Params:
          action: {{$action}}
          metricName: Apiserver Max Memory Usage
          metricVersion: v1
          unit: MB
          enableViolations: true
          queries:
          - name: Perc99
            query: quantile(0.99, max_over_time(process_resident_memory_bytes{endpoint="apiserver"}[%v:]) / 1024 / 1024)
          - name: Perc90
            query: quantile(0.90, max_over_time(process_resident_memory_bytes{endpoint="apiserver"}[%v:]) / 1024 / 1024)
          - name: Perc50
            query: quantile(0.5, max_over_time(process_resident_memory_bytes{endpoint="apiserver"}[%v:]) / 1024 / 1024)
      - Identifier: apiserver_current_inflight_requests #TODO - not sure how useful this is as it's a gauge metric
        Method: GenericPrometheusQuery
        Params:
          action: {{$action}}
          metricName: Current API requests inflight
          metricVersion: v1
          unit: count
          enableViolations: true
          queries:
          - name: data
            query: sum(rate(apiserver_current_inflight_requests[%v:]))
      - Identifier: apiserver_watch_events_total
        Method: GenericPrometheusQuery
        Params:
          action: {{$action}}
          metricName: Apiserver watch events total per resource
          metricVersion: v1
          unit: count
          dimensions:
          - resource
          enableViolations: true
          queries:
          - name: data
            query: sum(rate(apiserver_watch_events_total[%v:])) by (resource)
      - Identifier: apiserver_watch_duration_seconds_bucket
        Method: GenericPrometheusQuery
        Params:
          action: {{$action}}
          metricName: Api server watch duration seconds
          metricVersion: v1
          unit: s
          dimensions:
          - resource
          enableViolations: true
          queries:
          - name: Perc99
            query: histogram_quantile(0.99, sum(rate(apiserver_watch_duration_seconds_bucket[%v:])) by (le, resource))
          - name: Perc90
            query: histogram_quantile(0.90, sum(rate(apiserver_watch_duration_seconds_bucket[%v:])) by (le, resource))
          - name: Perc50
            query: histogram_quantile(0.50, sum(rate(apiserver_watch_duration_seconds_bucket[%v:])) by (le, resource))
      - Identifier: etcd_disk_backend_commit_duration_seconds
        Method: GenericPrometheusQuery
        Params:
          action: {{$action}}
          metricName: ETCD disk backend commit duration #TODO - check if this is correct gauge metric
          metricVersion: v1
          unit: rate #TODO check if unit is valid - rate of size change per second
          enableViolations: true
          queries:
          - name: P99
            query: histogram_quantile(0.99, sum(rate(etcd_disk_backend_commit_duration_seconds_bucket[%v:])) by (le))
          - name: P90
            query: histogram_quantile(0.90, sum(rate(etcd_disk_backend_commit_duration_seconds_bucket[%v:])) by (le))
          - name: P50
            query: histogram_quantile(0.50, sum(rate(etcd_disk_backend_commit_duration_seconds_bucket[%v:])) by (le))
      - Identifier: etcd_debugging_mvcc_db_total_size_in_bytes
        Method: GenericPrometheusQuery
        Params:
          action: {{$action}}
          metricName: data
          metricVersion: v1
          unit: rate #TODO check if unit is valid - rate of size change per second
          enableViolations: true
          queries:
          - name: data
            query: deriv(etcd_debugging_mvcc_db_total_size_in_bytes[5m])
      - Identifier: etcd_server_proposals_pending
        Method: GenericPrometheusQuery
        Params:
          action: {{$action}}
          metricName: ETCD number of uncommited proposals rate change #TODO - check if this is correct gauge metric
          metricVersion: v1
          unit: rate #TODO check if unit is valid - rate of size change per second
          enableViolations: true
          queries:
          - name: data
            query: deriv(etcd_server_proposals_pending[%v:])
      - Identifier: etcd_server_proposals_applied_total
        Method: GenericPrometheusQuery
        Params:
          action: {{$action}}
          metricName: ETCD number of proposals applied #TODO - check if this is correct gauge metric
          metricVersion: v1
          unit: count
          dimensions:
          - resource
          enableViolations: true
          queries:
          - name: data
            query: rate(etcd_server_proposals_applied_total[%v:])