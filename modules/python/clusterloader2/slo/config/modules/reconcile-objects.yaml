## Input params
# Valid actions: "create", "delete"
{{$actionName := printf "%s objects" .actionName}}
{{$namespaces := .namespaces}}
{{$tuningSet := .tuningSet}}

# Derivative variables
{{$is_deleting := (eq .actionName "delete")}}
{{$operationTimeout := .operationTimeout}}

{{$daemonsets := .daemonsets}}
{{$namespaceType := .namespaceType}}
{{$nsBasename := "my-namespace"}}
{{$surge := .surge}}

steps:
- name: Starting measurement for '{{$actionName}}'
  measurements:
  - Method: WaitForControlledPodsRunning
    Instances:
    - Identifier: WaitForRunningDaemonSets
      Params:
        apiVersion: apps/v1
        kind: DaemonSet
    Params:
      action: start
      checkIfPodsAreUpdated: true
      labelSelector: group = {{.Group}}
      operationTimeout: {{$operationTimeout}}

- name: {{$actionName}}
  phases:
  {{ if eq $namespaces 1 }}
  - replicasPerNamespace: 1
    tuningSet: {{$tuningSet}}
    objectBundle:
    - basename: {{$nsBasename}}
      objectTemplatePath: namespace_template.yaml
      templateFillMap:
        Name: {{$nsBasename}}
        Type: {{$namespaceType}}
  {{ end }}

  - namespaceRange:
      min: 0
      max: 0
      basename: {{$nsBasename}}
    replicasPerNamespace: {{$daemonsets}}
    tuningSet: {{$tuningSet}}
    objectBundle:
    - basename: daemonset
      objectTemplatePath: daemonset_template.yaml
      templateFillMap:
        Group: {{.Group}}
        surge: {{.surge}}

- name: Waiting for '{{$actionName}}' to be completed
  measurements:
  - Method: WaitForControlledPodsRunning
    Instances:
    - Identifier: WaitForRunningDaemonSets
    Params:
      action: gather
      refreshInterval: 15s