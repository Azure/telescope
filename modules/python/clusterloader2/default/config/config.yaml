name: job-scheduling

{{$jobCount := DefaultParam .CL2_JOB_COUNT 20000}}
{{$memory := DefaultParam .CL2_RESOURCE_CONSUME_MEMORY "100"}}
{{$memoryKi := DefaultParam .CL2_RESOURCE_CONSUME_MEMORY_KI "100"}}
{{$cpu := DefaultParam .CL2_RESOURCE_CONSUME_CPU 100}}
{{$repeats := DefaultParam .CL2_REPEATS 1}}

{{$steps := DefaultParam .CL2_STEPS 1}}
{{$nodePerStep := DefaultParam .CL2_NODE_PER_STEP 1}}
{{$totalNodes := MultiplyInt $nodePerStep $steps}}
{{$replicas := MultiplyInt $jobCount $totalNodes}}
{{$scaleReplicas := MultiplyInt $jobCount $nodePerStep}}
{{$scaleEnabled := DefaultParam .CL2_SCALE_ENABLED false}}

{{$operationTimeout := DefaultParam .CL2_OPERATION_TIMEOUT "5m"}}
{{$jobLatencyThreshold := DefaultParam .CL2_POD_STARTUP_LATENCY_THRESHOLD "15s"}}
{{$loadType := DefaultParam .CL2_LOAD_TYPE "memory"}}

namespace:
  number: 1
  prefix: job-scheduling
  deleteStaleNamespaces: true
  deleteAutomanagedNamespaces: true
  enableExistingNamespaces: false

tuningSets:
- name: Uniform1qps
  qpsLoad:
    qps: 1

steps:
  - name: Start measurements
    measurements:
      - Identifier: JobLifecycleLatency
        Method: JobLifecycleLatency
        Params:
          action: start
          labelSelector: group = job-scheduling
          threshold: {{$jobLatencyThreshold}}
  
      - Identifier: WaitForRunningLatencyDeployments
        Method: WaitForRunningLatencyDeployments
        Params:
          action: start
          checkIfPodsAreUpdated: true
          apiVersion: apps/v1
          kind: Deployment
          labelSelector: group = job-scheduling
          operationTimeout: {{$operationTimeout}}

{{range $i := Loop $repeats}}
  {{range $j := Loop $steps}}
  - name: Create job {{$j}}
    phases:
    - namespaceRange:
          min: 1
          max: 1
      replicasPerNamespace: 1
      tuningSet: Uniform1qps
      objectBundle:
      - basename: job-scheduling-{{$j}}
        objectTemplatePath: job_template.yaml
        templateFillMap:
      {{if $scaleEnabled}}
        {{if eq $j 0}}
          Replicas: {{AddInt $scaleReplicas $jobCount}}
        {{else}}
          Replicas: {{$scaleReplicas}}
        {{end}}
      {{else}}
          Replicas: {{$replicas}}
      {{end}}
          Group: job-scheduling
          Memory: {{$memory}}K
          CPU: --millicores={{$cpu}}
          MemoryRequest: {{$memoryKi}}
          CPURequest: {{$cpu}}m
          LoadType: {{$loadType}}

  - name: Waiting for jobs to be running
    measurements:
      - Identifier: WaitForRunningLatencyDeployments
        Method: WaitForRunningLatencyDeployments
        Params:
          action: gather

  - name: Wait for resource consumption
    measurements:
      - Identifier: Sleep
        Method: Sleep
        Params:
          duration: 1m

  - name: Wait for nodes to be ready
    measurements:
      - Identifier: ConfirmNodeCount
        Method: WaitForNodes
        Params:
          action: start
        {{if $scaleEnabled}}
          minDesiredNodeCount: {{MultiplyInt (AddInt (MultiplyInt $nodePerStep (AddInt $j 1)) 1) 0.8}}
          maxDesiredNodeCount: {{AddInt $totalNodes 1}}
        {{else}}
          minDesiredNodeCount: {{MultiplyInt $totalNodes 0.8}}
          maxDesiredNodeCount: {{$totalNodes}}
        {{end}}
          labelSelector: cri-resource-consume = true
          timeout: 1m
          refreshInterval: 5s
  {{end}}

  {{range $j := Loop $steps}}
  - name: Deleting jobs {{$j}}
    phases:
      - namespaceRange:
          min: 1
          max: 1
        replicasPerNamespace: 0
        tuningSet: Uniform1qps
        objectBundle:
          - basename: job-scheduling-{{$j}}
            objectTemplatePath: job_template.yaml

  - name: Waiting for jobs to be deleted
    measurements:
      - Identifier: WaitForRunningLatencyDeployments
        Method: WaitForControlledPodsRunning
        Params:
          action: gather
  {{end}}
{{end}}

  - name: Collect measurements
    measurements:
      - Identifier: ResourceUsageSummary
        Method: ResourceUsageSummary
        Params:
          action: gather
      - Identifier: JobLifecycleLatency
        Method: JobLifecycleLatency
        Params:
          action: gather
