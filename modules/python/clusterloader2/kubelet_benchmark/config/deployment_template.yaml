{{$hasResourceRequest := DefaultParam .HasResourceRequest false}}
{{$hasResourceLimit := DefaultParam .HasResourceLimit false}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Name}}
  labels:
    group: {{.Group}}
spec:
  replicas: {{.Replicas}}
  selector:
    matchLabels:
      name: {{.Name}}
  template:
    metadata:
      labels:
        name: {{.Name}}
        group: {{.Group}}
    spec:
      hostNetwork: true
      nodeSelector:
        kubelet-benchmark: "true"
      containers:
      - name: resource-consumer
        image: akscritelescope.azurecr.io/e2e-test-images/resource-consumer:1.9
        imagePullPolicy: IfNotPresent
        resources:
  {{if $hasResourceRequest}}
          requests:
            memory: {{.MemoryRequest}}
            cpu: {{.CPURequest}}
  {{end}}
  {{if $hasResourceLimit}}
          limits:
            memory: {{.MemoryLimit}}
            cpu: {{.CPULimit}}
  {{end}}
{{if eq .LoadType "multiworker"}}
        command: ["sh", "-c", "counter=1; while [ $counter -le 30 ]; do echo \"Running memory stress iteration $counter/30\"; stress -m 4 --vm-bytes $(({{.Memory}}/4))M --vm-hang 0 -t {{.Duration}}; echo \"Completed iteration $counter/30\"; sleep $(shuf -i 1-10 -n 1); counter=$((counter+1)); done"]
{{end}}
{{if eq .LoadType "rampup"}}
        command: ["/bin/sh", "-c", "for i in $(seq 1 10); do percentage=$((i * 10)); allocation=$(( {{.Memory}} * percentage / 100 )); echo \"Allocating ${allocation}M (${percentage}% of limit)\"; stress -m 1 --vm-bytes ${allocation}M --vm-hang 0 -t 30; sleep 5; done"]
{{end}}
{{if eq .LoadType "seesaw"}}
        command: ["/bin/sh", "-c", "counter=1; while [ $counter -le 10 ]; do echo \"Memory stress cycle $counter/10\"; stress -m 1 --vm-bytes $(({{.Memory}} * 80 / 100))M --vm-hang 0 -t 30; sleep 5; stress -m 1 --vm-bytes $(({{.Memory}} * 95 / 100))M --vm-hang 0 -t 10; sleep 10; counter=$((counter+1)); done"]
{{end}}
{{if eq .LoadType "cpu"}}
      - name: resource-consumer-client
        image: mcr.microsoft.com/cbl-mariner/busybox:2.0
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "while true; do curl --data 'millicores=300&durationSec={{.Duration}}' http://resource-consumer/ConsumeCPU; sleep 60; done"]
{{end}}
      tolerations:
      - key: {{.NodeLabel}}
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      - key: {{.NodeLabel}}
        operator: "Equal"
        value: "true"
        effect: "NoExecute"
