## Input params
# Valid actions: "create", "delete"
{{$actionName := printf "%s objects" .actionName}}
{{$tuningSet := .tuningSet}}
{{$operationTimeout := .operationTimeout}}
{{$Group := .Group}}
{{$namespaces := .namespaces}}
{{$deploymentLabel := .deploymentLabel}}

{{$fortioServerDeployments := .fortioServerDeployments}}
{{$fortioClientDeployments := .fortioClientDeployments}}

{{$fortioServerDeploymentReplicasPerNamespace := .fortioServerDeploymentReplicasPerNamespace}}
{{$fortioClientDeploymentReplicasPerNamespace := .fortioClientDeploymentReplicasPerNamespace}}

{{$fortioServerReplicasPerDeployment := .fortioServerReplicasPerDeployment}}
{{$fortioClientReplicasPerDeployment := .fortioClientReplicasPerDeployment}}

{{$fortioClientQueriesPerSecond := .fortioClientQueriesPerSecond}}


steps:
- name: Starting measurement for '{{$actionName}}'
  measurements:
  - Method: WaitForControlledPodsRunning
    Instances:
    - Identifier: WaitForRunningDeployments
      Params:
        apiVersion: apps/v1
        kind: Deployment
    Params:
      action: start
      checkIfPodsAreUpdated: true
      labelSelector: group = {{.Group}}
      operationTimeout: {{$operationTimeout}}
      apiVersion: apps/v1

- name: '{{$actionName}} servers'
  phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$fortioServerDeploymentReplicasPerNamespace}}
    tuningSet: {{$tuningSet}}
    objectBundle:
      - basename: fortio-server
        objectTemplatePath: fortio_server_deployment_template.yaml
        templateFillMap:
          Replicas: {{$fortioServerReplicasPerDeployment}}
          SvcName: fortio-server-service
          Group: {{.Group}}
          deploymentLabel: {{.deploymentLabel}}

- name: Waiting for '{{$actionName}} servers' to be completed
  measurements:
  - Method: WaitForControlledPodsRunning
    Instances:
    - Identifier: WaitForRunningDeployments
    Params:
      action: gather
      refreshInterval: 15s

# Create clients after the servers have been created because we want all servers to be backend pods for their service
- name: '{{$actionName}} clients'
  phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$fortioClientDeploymentReplicasPerNamespace}}
    tuningSet: {{$tuningSet}}
    objectBundle:
      - basename: fortio-client
        objectTemplatePath: fortio_client_deployment_template.yaml
        templateFillMap:
          Replicas: {{$fortioClientReplicasPerDeployment}}
          Group: {{.Group}}
          deploymentLabel: {{.deploymentLabel}}
          FortioClientQueriesPerSecond: {{$fortioClientQueriesPerSecond}}

- name: Waiting for '{{$actionName}} clients' to be completed
  measurements:
  - Method: WaitForControlledPodsRunning
    Instances:
    - Identifier: WaitForRunningDeployments
    Params:
      action: gather
      refreshInterval: 15s
