<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Web Server Test" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">${__P(loop_count,1)}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(thread_num,100)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(ramp_time,5)}</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="request_delay" elementType="Argument">
              <stringProp name="Argument.name">request_delay</stringProp>
              <stringProp name="Argument.value">200</stringProp>
              <stringProp name="Argument.desc">Amount of delay between requests</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="thread_num" elementType="Argument">
              <stringProp name="Argument.name">thread_num</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.desc">Number of threads</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loop_count" elementType="Argument">
              <stringProp name="Argument.name">loop_count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">Number of loops</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="result_file_name" elementType="Argument">
              <stringProp name="Argument.name">result_file_name</stringProp>
              <stringProp name="Argument.value">summary</stringProp>
              <stringProp name="Argument.desc">Name of result file</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="protocol" elementType="Argument">
              <stringProp name="Argument.name">protocol</stringProp>
              <stringProp name="Argument.value">https</stringProp>
              <stringProp name="Argument.desc">Protocol</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="port" elementType="Argument">
              <stringProp name="Argument.name">port</stringProp>
              <stringProp name="Argument.value">443</stringProp>
              <stringProp name="Argument.desc">Port number</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="http_method" elementType="Argument">
              <stringProp name="Argument.name">http_method</stringProp>
              <stringProp name="Argument.value">GET</stringProp>
              <stringProp name="Argument.desc">Method value for http request</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="aws_access_key" elementType="Argument">
              <stringProp name="Argument.name">aws_access_key</stringProp>
              <stringProp name="Argument.value">key</stringProp>
              <stringProp name="Argument.desc">Value for aws access key id</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="aws_secret_key" elementType="Argument">
              <stringProp name="Argument.name">aws_secret_key</stringProp>
              <stringProp name="Argument.value">value</stringProp>
              <stringProp name="Argument.desc">Value for aws access key secret</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="aws_host" elementType="Argument">
              <stringProp name="Argument.name">aws_host</stringProp>
              <stringProp name="Argument.value">bucket.s3.amazonaws.com</stringProp>
              <stringProp name="Argument.desc">Value for aws api endpoint</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="aws_service_name" elementType="Argument">
              <stringProp name="Argument.name">aws_service_name</stringProp>
              <stringProp name="Argument.value">execute-api</stringProp>
              <stringProp name="Argument.desc">Value for aw spi service name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="aws_region" elementType="Argument">
              <stringProp name="Argument.name">aws_region</stringProp>
              <stringProp name="Argument.value">us-east-2</stringProp>
              <stringProp name="Argument.desc">Region for aws resource to perform call on</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="aws_region" elementType="Argument">
              <stringProp name="Argument.name">aws_account_id</stringProp>
              <stringProp name="Argument.value">account</stringProp>
              <stringProp name="Argument.desc">Value for expected bucket owner auth header</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ip_address" elementType="Argument">
              <stringProp name="Argument.name">ip_address</stringProp>
              <stringProp name="Argument.value">52.219.96.0</stringProp>
              <stringProp name="Argument.desc">Value for request source ip address</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import java.security.InvalidKeyException
import java.security.MessageDigest
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat


//Defined in User Defined Variables
def access_key = vars.get(&quot;aws_access_key&quot;)
def secret_key = vars.get(&quot;aws_secret_key&quot;)
def service = vars.get(&quot;aws_service_name&quot;)
def host = &quot;s3.amazonaws.com&quot;
def region = &quot;us-east-2&quot;
def bucket_owner = vars.get(&quot;aws_account_id&quot;)

//Obtain data form the Http Request Sampler
def method = &quot;HEAD&quot;
def url = sampler.getUrl()
def req_path = &quot;/&quot;
def req_query_string = &quot;&quot;
def request_parameters = &apos;&apos;;

sampler.getArguments().each {arg -&gt;
    request_parameters = arg.getStringValue().substring(1)
}

//Create the variable x-amz-date 
def now = new Date()
def amzFormat = new SimpleDateFormat( &quot;yyyyMMdd&apos;T&apos;HHmmss&apos;Z&apos;&quot; )
def stampFormat = new SimpleDateFormat( &quot;yyyyMMdd&quot; )
amzFormat.setTimeZone(TimeZone.getTimeZone(&quot;UTC&quot;));  //server timezone
def amzDate = amzFormat.format(now)
def dateStamp = stampFormat.format(now)
vars.put(&quot;x_amz_date&quot;, amzDate)


//Create a Canonical Request
def canonical_uri = &quot;/&quot;
def canonical_querystring = &quot;&quot;
def canonical_headers = &quot;host:&quot; + host + &quot;\n&quot; + &quot;x-amz-date:&quot; + amzDate + &quot;\n&quot; + &quot;x-amz-expected-bucket-owner:&quot; + bucket_owner + &quot;\n&quot;
def signed_headers = &quot;host;x-amz-date;x-amz-expected-bucket-owner&quot;
def payload_hash = &quot;UNSIGNED-PAYLOAD&quot;
def canonical_request = method + &quot;\n&quot; + canonical_uri + &quot;\n&quot; + canonical_querystring + &quot;\n&quot; + canonical_headers + &quot;\n&quot; + signed_headers + &quot;\n&quot; + payload_hash


//Create the String to Sign
def algorithm = &quot;AWS4-HMAC-SHA256&quot;
def credential_scope = dateStamp + &quot;/&quot; + region + &quot;/&quot; + service + &quot;/&quot; + &quot;aws4_request&quot;
def hash_canonical_request = getHexDigest(canonical_request)
def string_to_sign = algorithm + &quot;\n&quot; +  amzDate + &quot;\n&quot; +  credential_scope + &quot;\n&quot; +  hash_canonical_request

//Calculate the String to Sign
def signing_key = getSignatureKey(secret_key, dateStamp, region, service)
def signature = hmac_sha256Hex(signing_key, string_to_sign)

//Add Signing information to Variable
def authorization_header = algorithm + &quot; &quot; + &quot;Credential=&quot; + access_key + &quot;/&quot; + credential_scope + &quot;, &quot; +  &quot;SignedHeaders=&quot; + signed_headers + &quot;, &quot; + &quot;Signature=&quot; + signature
vars.put(&quot;aws_authorization&quot;, authorization_header)


def hmac_sha256(secretKey, data) {
    Mac mac = Mac.getInstance(&quot;HmacSHA256&quot;)
    SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, &quot;HmacSHA256&quot;)
    mac.init(secretKeySpec)
    byte[] digest = mac.doFinal(data.getBytes())
    return digest
}

def hmac_sha256Hex(secretKey, data) {
    def result = hmac_sha256(secretKey, data)
    return result.encodeHex()
}

def getSignatureKey(key, dateStamp, regionName, serviceName) {
    def kDate = hmac_sha256((&quot;AWS4&quot; + key).getBytes(), dateStamp)
    def kRegion = hmac_sha256(kDate, regionName)
    def kService = hmac_sha256(kRegion, serviceName)
    def kSigning = hmac_sha256(kService, &quot;aws4_request&quot;)
    return kSigning
}

def getHexDigest(text) {
    log.info(&quot;text:&quot;+text)
    def md = MessageDigest.getInstance(&quot;SHA-256&quot;)
    md.update(text.getBytes())
    return md.digest().encodeHex()
}

public static String orderQuery(URL url) throws UnsupportedEncodingException {

    def orderQueryString = &quot;&quot;;
    Map&lt;String, String&gt; queryPairs = new LinkedHashMap&lt;&gt;();
    String queryParams = url.getQuery();

    if (queryParams != null) {
        String[] pairs = queryParams.split(&quot;&amp;&quot;);
    
        for (String pair : pairs) {
            int idx = pair.indexOf(&quot;=&quot;);
            queryPairs.put(URLDecoder.decode(pair.substring(0, idx), &quot;UTF-8&quot;), URLDecoder.decode(pair.substring(idx + 1), &quot;UTF-8&quot;));
        }
        def orderQueryArray = new TreeMap&lt;String, String&gt;(queryPairs);
        orderQueryString  = urlEncodeUTF8(orderQueryArray)
    }
    return orderQueryString;
}

public static String urlEncodeUTF8(String s) {
    try {
        return URLEncoder.encode(s, &quot;UTF-8&quot;);
    } catch (UnsupportedEncodingException e) {
        throw new UnsupportedOperationException(e);
    }
}

public static String urlEncodeUTF8(Map&lt;?,?&gt; map) {
    StringBuilder sb = new StringBuilder();
    for (Map.Entry&lt;?,?&gt; entry : map.entrySet()) {
        if (sb.length() &gt; 0) {
            sb.append(&quot;&amp;&quot;);
        }
        sb.append(String.format(&quot;%s=%s&quot;,
            urlEncodeUTF8(entry.getKey().toString()),
            urlEncodeUTF8(entry.getValue().toString())
        ));
    }
    return sb.toString();       
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTPs Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(aws_host, bucket.s3.amazonaws.com)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(port, 443)}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">${__P(http_method, GET)}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <KeystoreConfig guiclass="TestBeanGUI" testclass="KeystoreConfig" testname="Keystore Configuration" enabled="true">
            <stringProp name="clientCertAliasVarName">cert_name</stringProp>
            <stringProp name="endIndex">10000</stringProp>
            <stringProp name="preload">True</stringProp>
            <stringProp name="startIndex">0</stringProp>
          </KeystoreConfig>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${aws_authorization}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-amz-date</stringProp>
                <stringProp name="Header.value">${x_amz_date}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-amz-expected-bucket-owner: </stringProp>
                <stringProp name="Header.value">${__P(aws_account_id, account)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${__P(result_file_name,aggregate)}.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">/tmp/jmeter/alias.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">cert_name</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Limit requests to 10 per second">
          <stringProp name="ConstantTimer.delay">${__P(request_delay, 200)}</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>