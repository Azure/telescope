parameters:
- name: region
  type: string

steps:
- script: |
    set -eu

    region=${{ parameters.region }}
    scenario=$(SCENARIO_TYPE)-$(SCENARIO_NAME)

    gke_name=$(gcloud container clusters list --region $region \
      --filter="resourceLabels.run_id=$RUN_ID AND resourceLabels.scenario=$scenario" \
      --format="value(name)")

    if [ -z "$gke_name" ]; then
      echo "##vso[task.logissue type=error;] GKE instance with tag $RUN_ID not found in $region."
      exit 1
    fi

    gke_info=$(gcloud container clusters describe $gke_name --region $region --format="json")

    cloud_info=$(jq -n \
      --arg cloud "gke" \
      --arg region $REGION \
      --arg k8s_version "$(echo $gke_info | jq -r .currentMasterVersion)" \
      '{cloud: $cloud, region: $region, k8s_version: $k8s_version}')
    cloud_info_str=$(echo $cloud_info | jq -c .)
    echo "Cloud info: $cloud_info_str"
    echo "##vso[task.setvariable variable=CLOUD_INFO;]$cloud_info_str"
  displayName: 'Collect Cloud Info for GCP'
  env:
    REGION: ${{ parameters.region }}
