parameters:
- name: command
  type: string
- name: arguments
  type: string
  default: ''
- name: regions
  type: object
  default: {}
- name: cloud
  type: string
  default: ''
- name: retry_attempt_count
  type: number
  default: 3
- name: credential_type
  type: string
  default: 'managed_identity'

steps:
- script: |
    set -e

    cd $TERRAFORM_WORKING_DIRECTORY
    if [[ ${{ parameters.command }} == "apply" || ${{ parameters.command }} == "destroy" ]]; then
      for region in $(echo "$REGIONS" | jq -r '.[]'); do
        if terraform workspace list | grep -q "$region"; then
          terraform workspace select $region
        else
          terraform workspace new $region
          terraform workspace select $region
        fi
        terraform_input_file=$(echo $TERRAFORM_REGIONAL_CONFIG | jq -r --arg region "$region" '.[$region].TERRAFORM_INPUT_FILE')
        terraform_input_variables=$(echo $TERRAFORM_REGIONAL_CONFIG | jq -r --arg region "$region" '.[$region].TERRAFORM_INPUT_VARIABLES')

        set +e
        terraform ${{ parameters.command }} --auto-approve ${{ parameters.arguments }} -var-file $terraform_input_file -var json_input="$terraform_input_variables"

        if [[ $? -ne 0 ]]; then
          if [[ ${{ parameters.command }} == "apply" && "$CLOUD" == "azure" ]]; then
            echo "Delete resources and remove state file before retrying"
            ids=$(az resource list --location $region --resource-group $RUN_ID --query [*].id -o tsv)
            az resource delete --ids $ids --verbose
            rm -r terraform.tfstate.d/$region
          fi
          if [[ ${{ parameters.command }} == "destroy" && "$CLOUD" == "aws" ]]; then
            echo "Delete all the network interfaces before retrying"
            subnet_ids=$(aws ec2 describe-subnets --query "Subnets[?Tags[?Key=='run_id' && Value=='$RUN_ID']].SubnetId" --output text)
            for subnet_id in $subnet_ids; do
              echo "Detaching Subnet: $subnet_id Network Interfaces ..."
              network_interfaces_attachment_id=$(aws ec2 describe-network-interfaces --filters Name=subnet-id,Values=$subnet_id --query "NetworkInterfaces[].Attachment.AttachmentId" --output text)
              for network_interface_attachment_id in $network_interfaces_attachment_id; do
                echo "Detaching Network Interface attachment id: $network_interface_attachment_id"
                if ! aws ec2 detach-network-interface --attachment-id $network_interface_attachment_id; then
                  echo "##vso[task.logissue type=error;] Failed to detach Network Interface attachment id: $network_interface_attachment_id"
                fi
              done
              echo "Deleting Subnet: $subnet_id Network Interfaces ..."
              network_interfaces=$(aws ec2 describe-network-interfaces --filters Name=subnet-id,Values=$subnet_id --query "NetworkInterfaces[].NetworkInterfaceId" --output text)
              for network_interface in $network_interfaces; do
                echo "Deleting Network Interface: $network_interface"
                if ! aws ec2 delete-network-interface --network-interface-id $network_interface; then
                  echo "##vso[task.logissue type=error;] Failed to delete Network Interface: $network_interface"
                fi
              done
            done
            echo "Delete all the security groups before retrying"
            vpc_id=$(aws ec2 describe-vpcs --query "Vpcs[?Tags[?Key=='run_id' && Value=='$RUN_ID']].VpcId" --output text)
            security_group_ids=$(aws ec2 describe-security-groups --filters Name=vpc-id,Values=$vpc_id --query "SecurityGroups[].GroupId" --output text)
            for security_group_id in $security_group_ids; do
              echo "Deleting Security Group: $security_group_id"
              if ! aws ec2 delete-security-group --group-id $security_group_id; then
                echo "##vso[task.logissue type=error;] Failed to delete Security Group: $security_group_id"
              fi
            done
          fi
          exit 1
        fi
      done
    else
      terraform ${{ parameters.command }} ${{ parameters.arguments }}
    fi
  displayName: "Run Terraform ${{ parameters.command }} Command"
  condition: ne(variables['SKIP_RESOURCE_MANAGEMENT'], 'true')
  retryCountOnTaskFailure: ${{ parameters.retry_attempt_count }}
  env:
    REGIONS: ${{ convertToJson(parameters.regions) }}
    CLOUD: ${{ parameters.cloud }}
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    ${{ if eq(parameters.credential_type, 'managed_identity') }}:
      ARM_USE_MSI: true
      ARM_TENANT_ID: $(AZURE_MI_TENANT_ID)
      ARM_CLIENT_ID: $(AZURE_MI_CLIENT_ID)
