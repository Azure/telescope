parameters:
- name: command
  type: string
- name: arguments
  type: string
  default: ''
- name: regions
  type: object
  default: {}
- name: cloud
  type: string
  default: ''
- name: retry_attempt_count
  type: number
  default: 3
- name: credential_type
  type: string
  default: 'managed_identity'

steps:
- script: |
    set -e

    cd $TERRAFORM_WORKING_DIRECTORY
    if [[ ${{ parameters.command }} == "apply" || ${{ parameters.command }} == "destroy" ]]; then
      for region in $(echo "$REGIONS" | jq -r '.[]'); do
        if terraform workspace list | grep -q "$region"; then
          terraform workspace select $region
        else
          terraform workspace new $region
          terraform workspace select $region
        fi
        terraform_input_file=$(echo $TERRAFORM_REGIONAL_CONFIG | jq -r --arg region "$region" '.[$region].TERRAFORM_INPUT_FILE')
        terraform_input_variables=$(echo $TERRAFORM_REGIONAL_CONFIG | jq -r --arg region "$region" '.[$region].TERRAFORM_INPUT_VARIABLES')

        set +e
        terraform ${{ parameters.command }} --auto-approve ${{ parameters.arguments }} -var-file $terraform_input_file -var json_input=$terraform_input_variables
      done
    else
      terraform ${{ parameters.command }} ${{ parameters.arguments }}
    fi
  displayName: "Run Terraform ${{ parameters.command }} Command"
  condition: ne(variables['SKIP_RESOURCE_MANAGEMENT'], 'true')
  retryCountOnTaskFailure: ${{ parameters.retry_attempt_count }}
  env:
    REGIONS: ${{ convertToJson(parameters.regions) }}
    CLOUD: ${{ parameters.cloud }}
    ${{ if eq(parameters.credential_type, 'managed_identity') }}:
      ARM_USE_MSI: true
      ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
      ARM_TENANT_ID: $(AZURE_MI_TENANT_ID)
      ARM_CLIENT_ID: $(AZURE_MI_CLIENT_ID)
