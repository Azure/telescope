parameters:
- name: cloud
  type: string
- name: regions
  type: object
- name: input_file_mapping
  type: object
  default: []

steps:
- script: |
    set -eu
    regional_config=$(jq -n '{}')
    terraform_file_config=$(echo "${{ convertToJson(parameters.input_file_mapping) }}" | sed -E 's/([a-zA-Z0-9_-]+):/"\1":/g; s/: ([^",]+)/: "\1"/g' | jq -r '.[]')
    multi_region=$(echo "$REGIONS" | jq -r 'if length > 1 then "true" else "false" end')
    echo "##vso[task.setvariable variable=MULTI_REGION]$multi_region"
    for region in $(echo "$REGIONS" | jq -r '.[]'); do
      if [ -n "$terraform_file_config" ]; then
        regional_input_file_path=$(echo "$terraform_file_config" | jq -r --arg region "$region" '.[$region]')
        terraform_input_file=$(Pipeline.Workspace)/s/${regional_input_file_path}
      elif [ $multi_region = "false" ]; then
        terraform_input_file=$(Pipeline.Workspace)/s/scenarios/$SCENARIO_TYPE/$SCENARIO_NAME/terraform-inputs/${CLOUD}.tfvars
      else
        terraform_input_file=$(Pipeline.Workspace)/s/scenarios/$SCENARIO_TYPE/$SCENARIO_NAME/terraform-inputs/${CLOUD}-${region}.tfvars
      fi
      regional_config=$(echo $regional_config | jq --arg region $region --arg file_path $terraform_input_file '. + {($region): {"TERRAFORM_INPUT_FILE" : $file_path}}')
    done
    regional_config_str=$(echo $regional_config | jq -c .)
    echo "##vso[task.setvariable variable=REGIONAL_CONFIG]$regional_config_str"

  displayName: 'Set Terraform Input File'
  condition: ne(variables['SKIP_RESOURCE_MANAGEMENT'], 'true')
  env:
    CLOUD: ${{ parameters.cloud }}
    REGIONS: ${{ convertToJson(parameters.regions) }}
