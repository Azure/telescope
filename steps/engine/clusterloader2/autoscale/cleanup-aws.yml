steps:
- script: |

    kubectl delete --all nodeclaim --ignore-not-found
    kubectl delete --all nodepool --ignore-not-found

    # Get all Karpenter nodes
    NODES=$(kubectl get nodes -l karpenter.sh/nodepool -o jsonpath='{.items[*].metadata.name}')
    for NODE in $NODES; do
      # Extract the instance ID
      INSTANCE_ID=$(kubectl get node "$NODE" -o json | jq -r '.spec.providerID' | cut -d '/' -f5)

      if [ -n "$INSTANCE_ID" ]; then
        echo "Terminating instance: $INSTANCE_ID"
        # Terminate the instance
        aws ec2 terminate-instances --instance-ids "$INSTANCE_ID"
      fi
    done

    sleep 120

    # Delete any available (not in use) elastic network interface (ENI) attached to the VPC
    # Get VPC Id
    vpc_id=$(aws ec2 describe-vpcs --query "Vpcs[?Tags[?Key=='run_id' && Value=='$RUN_ID']].VpcId" --output text)
    # Get all available ENIs attached to the VPC
    network_interface_ids=$(aws ec2 describe-network-interfaces --filters 'Name=vpc-id,Values=$vpc_id' 'Name=status,Values=available' --query "NetworkInterfaces[].NetworkInterfaceId" --output text)
    for network_interface in $network_interface_ids; do
      echo "Deleting available Network Interface: $network_interface attached to VPC: $vpc_id"
      if ! aws ec2 delete-network-interface --network-interface-id $network_interface; then
        echo "##[warning] Failed to delete Network Interface: $network_interface"
      fi
    done

    subnet_ids=$(aws ec2 describe-subnets --query "Subnets[?Tags[?Key=='run_id' && Value=='$RUN_ID']].SubnetId" --output text)
    for subnet_id in $subnet_ids; do
      echo "Detaching Subnet: $subnet_id Network Interfaces"
      network_interfaces_attachment_ids=$(aws ec2 describe-network-interfaces --filters Name=subnet-id,Values=$subnet_id --query "NetworkInterfaces[?Attachment.AttachIndex!='0'].Attachment.AttachmentId" --output text)
      for network_interface_attachment_id in $network_interfaces_attachment_ids; do
        echo "Detaching Network Interface attachment id: $network_interface_attachment_id"
        if ! aws ec2 detach-network-interface --attachment-id $network_interface_attachment_id; then
          echo "##[warning] Failed to detach Network Interface attachment id: $network_interface_attachment_id"
        fi
      done
      network_interfaces=$(aws ec2 describe-network-interfaces --filters Name=subnet-id,Values=$subnet_id --query "NetworkInterfaces[?Attachment.AttachIndex!='0'].NetworkInterfaceId" --output text)
      for network_interface in $network_interfaces; do
        echo "Deleting Network Interface: $network_interface"
        if ! aws ec2 delete-network-interface --network-interface-id $network_interface; then
          echo "##[warning] Failed to delete Network Interface: $network_interface"
        fi
      done
    done
  displayName: "Cleanup Resources"
  condition: always()
