parameters:
- name: cloud
  type: string
  default: ''
- name: engine_input
  type: object
  default: {}
- name: region
  type: string

steps:
- script: |
    kubectl delete --all nodeclaim --ignore-not-found
    kubectl delete --all nodepool --ignore-not-found
  displayName: "Delete NodeClaim and NodePool"
  condition: always()
- script: |
    echo "Delete all the network interfaces"
    subnet_ids=$(aws ec2 describe-subnets --query "Subnets[?Tags[?Key=='run_id' && Value=='$RUN_ID']].SubnetId" --output text)
    for subnet_id in $subnet_ids; do
      echo "Detaching Subnet: $subnet_id Network Interfaces"
      network_interfaces_attachment_ids=$(aws ec2 describe-network-interfaces --filters Name=subnet-id,Values=$subnet_id --query "NetworkInterfaces[?Attachment.AttachIndex!='0'].Attachment.AttachmentId" --output text)
      for network_interface_attachment_id in $network_interfaces_attachment_ids; do
        echo "Detaching Network Interface attachment id: $network_interface_attachment_id"
        if ! aws ec2 detach-network-interface --attachment-id $network_interface_attachment_id; then
          echo "##[warning] Failed to detach Network Interface attachment id: $network_interface_attachment_id"
        fi
      done
      network_interfaces=$(aws ec2 describe-network-interfaces --filters Name=subnet-id,Values=$subnet_id --query "NetworkInterfaces[?Attachment.AttachIndex!='0'].NetworkInterfaceId" --output text)
      for network_interface in $network_interfaces; do
        echo "Deleting Network Interface: $network_interface"
        if ! aws ec2 delete-network-interface --network-interface-id $network_interface; then
          echo "##[warning] Failed to delete Network Interface: $network_interface"
        fi
      done
    done
  displayName: "Delete Network Interfaces"
  condition: ${{ eq(parameters.cloud, 'aws') }}
- template: /steps/cloud/${{ parameters.cloud }}/collect-cloud-info.yml
  parameters:
    region: ${{ parameters.region }}
- script: |
    set -eo pipefail

    PYTHONPATH=$PYTHONPATH:$(pwd) python3 $PYTHON_SCRIPT_FILE collect $CPU_PER_NODE $NODE_COUNT $POD_COUNT \
      $CL2_REPORT_DIR "$CLOUD_INFO" $RUN_ID $RUN_URL $TEST_RESULTS_FILE
  workingDirectory: modules/python/clusterloader2
  env:
    CLOUD: ${{ parameters.cloud }}
    RUN_URL: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs&j=$(System.JobId)
    PYTHON_SCRIPT_FILE: $(Pipeline.Workspace)/s/modules/python/clusterloader2/autoscale/autoscale.py
    CL2_REPORT_DIR: $(Pipeline.Workspace)/s/modules/python/clusterloader2/autoscale/results
  displayName: "Collect Results"
