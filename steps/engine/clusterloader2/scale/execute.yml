parameters:
  - name: cloud
    type: string
    default: ""
  - name: engine_input
    type: object
    default: {}
  - name: region
    type: string
  - name: install
    type: boolean
    default: false
  - name: repository
    type: string
    default: ""
  - name: makeargs
    type: string
    default: ""
  - name: ref
    type: string
    default: "main"

steps:
  - script: |
      echo "Set the start time for test execution"
      startTimestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      echo "Start: $startTimestamp"
      echo "##vso[task.setvariable variable=START_TIME]$startTimestamp"
    displayName: set up timestamp variable

  - ${{ if parameters.install }}:
      - script: |
          git clone http://github.com/microsoft/retina.git --depth 1 retina
          cd retina
          git checkout ${{ parameters.ref }}
        displayName: Clone Retina OSS Repo

      - script: |
          cd retina
          make ${{ parameters.makeargs }}
        displayName: Install Retina

  - script: |
      set -eo pipefail

      PYTHONPATH=$PYTHONPATH:$(pwd) python3 $PYTHON_SCRIPT_FILE configure \
        --fortio-servers-per-deployment $FORTIO_SERVERS_PER_DEPLOYMENT \
        --fortio-clients-per-deployment $FORTIO_CLIENTS_PER_DEPLOYMENT \
        --fortio-client-queries-per-second $FORTIO_CLIENT_QUERIES_PER_SECOND \
        --fortio-client-connections $FORTIO_CLIENT_CONNECTIONS \
        --fortio-namespaces $FORTIO_NAMESPACES \
        --fortio-deployments-per-namespace $FORTIO_DEPLOYMENTS_PER_NAMESPACE \
        --network-policies-per-namespace $NETWORK_POLICIES_PER_NAMESPACE \
        --provider ${CLOUD:-0} \
        --scrape_containerd ${SCRAPE_CONTAINERD:-False} \
        --generate-retina-network-flow-logs ${GENERATE_RETINA_NETWORK_FLOW_LOGS:-False} \
        --label_traffic_pods ${LABEL_TRAFFIC_PODS:-False} \
        --cl2_override_file ${CL2_CONFIG_DIR}/overrides.yaml
      PYTHONPATH=$PYTHONPATH:$(pwd) python3 $PYTHON_SCRIPT_FILE execute \
        ${CL2_IMAGE} ${CL2_CONFIG_DIR} $CL2_REPORT_DIR $CL2_CONFIG_FILE \
        ${HOME}/.kube/config $CLOUD ${SCRAPE_CONTAINERD:-False}
    workingDirectory: modules/python
    env:
      ${{ if eq(parameters.cloud, 'azure') }}:
        CLOUD: aks
      ${{ else }}:
        CLOUD: ${{ parameters.cloud }}
      REGION: ${{ parameters.region }}
      PYTHON_SCRIPT_FILE: $(Pipeline.Workspace)/s/modules/python/clusterloader2/scale/scale.py
      CL2_IMAGE: ${{ parameters.engine_input.image }}
      CL2_CONFIG_DIR: $(Pipeline.Workspace)/s/modules/python/clusterloader2/scale/config
      CL2_REPORT_DIR: $(Pipeline.Workspace)/s/modules/python/clusterloader2/scale/results
    displayName: "Run Benchmark"

  - ${{ if parameters.install }}:
      - script: |
          cd retina
          make helm-uninstall
        condition: always()
        displayName: Uninstall Helm Chart
