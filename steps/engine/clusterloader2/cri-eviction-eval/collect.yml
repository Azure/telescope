parameters:
- name: cloud
  type: string
  default: ''
- name: engine_input
  type: object
  default: {}
- name: region
  type: string
- name: topology
  type: string
- name: node_count
  type: string
- name: max_pods
  type: string
- name: load_type
  type: string
- name: eviction_hard_memory
  type: string
  default: "100Mi"


steps:
- template: /steps/cloud/${{ parameters.cloud }}/collect-cloud-info.yml
  parameters:
    region: ${{ parameters.region }}
- script: |
    set -eo pipefail
    set -x
  
    echo "Collecting eviction benchmark"
  
    echo "Python script file:   $PYTHON_SCRIPT_FILE"
    echo "Node label:           $NODE_LABEL"
    echo "CL2 config dir:       $CL2_CONFIG_DIR"
    echo "CL2 report dir:       $CL2_REPORT_DIR"
    echo "Cloud:                $CLOUD"
    echo "Kubeconfig:           ${HOME}/.kube/config"
  
    echo "Generating clusterloader2 override config"
    echo "Node count:           $NODE_COUNT"
    echo "Max pods:             $MAX_PODS"
    echo "Operation timeout:    $OPERATION_TIMEOUT"
    echo "Load type:            $LOAD_TYPE"
    
    PYTHONPATH=$PYTHONPATH:$(pwd) python3 $PYTHON_SCRIPT_FILE collect \
      $NODE_LABEL $CL2_CONFIG_DIR $CL2_REPORT_DIR $CLOUD ${HOME}/.kube/config \
      $NODE_COUNT $MAX_PODS $LOAD_TYPE $EVICTION_THRESHOLD_MEM $RUN_ID $RUN_URL $TEST_RESULTS_FILE
  workingDirectory: modules/python/clusterloader2
  env:
    ${{ if eq(parameters.cloud, 'azure') }}:
      CLOUD: aks
    ${{ else }}:
      CLOUD: ${{ parameters.cloud }}
    RUN_URL: $(RUN_URL)
    NODE_COUNT: ${{ parameters.node_count }}
    EVICTION_THRESHOLD_MEM: ${{ parameters.eviction_hard_memory }}
    MAX_PODS: ${{ parameters.max_pods }}
    LOAD_TYPE: ${{ parameters.load_type }}
    PYTHON_SCRIPT_FILE: $(Pipeline.Workspace)/s/modules/python/clusterloader2/cri-eviction-eval/eviction-eval.py
    CL2_REPORT_DIR: $(Pipeline.Workspace)/s/modules/python/clusterloader2/cri-eviction-eval/results
  displayName: "Collect Results"
