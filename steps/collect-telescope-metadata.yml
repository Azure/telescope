parameters:
- name: engine
  type: string
- name: topology
  type: string
- name: engine_input
  type: object
- name: cloud
  type: string
- name: credential_type
  type: string
- name: regions
  type: object
steps:
- script: |
    telescope_metadata=$(jq -n \
      --arg run_id $RUN_ID \
      --arg run_url  $RUN_URL \
      --arg code_url  $CODE_URL \
      --arg reason "$(Build.Reason)" \
      --arg pipeline_branch "$(Build.SourceBranchName)" \
      --arg requester "$(Build.RequestedFor)" \
      --arg scenario_name "$SCENARIO_NAME" \
      --arg scenario_type "$SCENARIO_TYPE" \
      --arg engine "$ENGINE" \
      --arg topology "$TOPOLOGY" \
      --arg engine_input "$(echo $ENGINE_INPUT | jq -r '.')" \
      --arg cloud "$CLOUD" \
      --arg region "$(echo "$REGIONS" | jq -r '.[]')" \
      --arg pipeline_id "$(System.DefinitionId)" \
      --arg pipeline_name "$(Build.DefinitionName)" \
      --arg cron_schedule_display_name "$BUILD_CRONSCHEDULE_DISPLAYNAME" \
      --arg project_name "$(System.TeamProject)" \
      '{
          pipeline_info: {
            run_id: $run_id,
            run_url: $run_url,
            reason: $reason,
            pipeline_branch: $pipeline_branch,
            requester: $requester,
            pipeline_id: $pipeline_id,
            pipeline_name: $pipeline_name,
            cron_schedule_display_name: $cron_schedule_display_name,
            project_name: $project_name,
            code_url: $code_url
          },
          scenario_info: {
            scenario_name: $scenario_name,
            scenario_type: $scenario_type,
            engine: $engine,
            topology: $topology,
            engine_input: $engine_input
          },
          cloud_info: {
            cloud: $cloud,
            region: $region
          }
      }' | jq 'with_entries(select(.value != null and .value != ""))' | jq -c .)
    echo "Telescope Metadata: $telescope_metadata"
    echo "$telescope_metadata" > $TEST_RESULTS_DIR/telescope_metadata.json
    echo "##vso[task.setvariable variable=TELESCOPE_METADATA_FILE]$TEST_RESULTS_DIR/telescope_metadata.json"
  displayName: "Collect Telescope Metadata"
  condition: always()
  env:
    ENGINE: ${{ parameters.engine }}
    TOPOLOGY: ${{ parameters.topology }}
    ENGINE_INPUT: ${{ convertToJson(parameters.engine_input) }}
    CLOUD: ${{ parameters.cloud }}
    REGIONS: ${{ convertToJson(parameters.regions) }}

- script: |
    # Read the test results file and add the telescope metadata to it for each json record in the file
    set -eux
    jq --argfile telescope_metadata $(TELESCOPE_METADATA_FILE) \
      -c '. + {telescope_metadata: $telescope_metadata}' $(TEST_RESULTS_FILE) > temp-$RUN_ID.json \
       && mv temp-$RUN_ID.json $(TEST_RESULTS_FILE)
  displayName: "Add Telescope Metadata to Test Results"
  condition: always()

- ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
  - template: /steps/cloud/azure/upload-storage-account.yml
    parameters:
      source_file_name: $(TELESCOPE_METADATA_FILE)
      destination_file_name: $(RUN_ID).json
      subfolder: telescope-metadata/main
      credential_type: ${{ parameters.credential_type }}
      cloud: ${{ parameters.cloud }}
      upload_type: "Telescope Metadata"
