parameters:
- name: engine
  type: string
- name: topology
  type: string
- name: engine_input
  type: object
- name: cloud
  type: string
- name: credential_type
  type: string
- name: regions
  type: object
steps:
- script: |
    set -e

    if [ -z "$CLOUD_INFO" ]; then
      CLOUD_INFO=$(jq -n -c \
        --arg cloud "$CLOUD" \
        --arg region "$(echo "$REGIONS" | jq -r '.[]')" \
        '{
          cloud: $cloud,
          region: $region
        }')
    fi

    telescope_metadata=$(jq -n \
      --arg run_id $RUN_ID \
      --arg run_url  $RUN_URL \
      --arg code_url  $CODE_URL \
      --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")" \
      --arg reason "$(Build.Reason)" \
      --arg pipeline_branch "$(Build.SourceBranchName)" \
      --arg requester "$(Build.RequestedFor)" \
      --arg scenario_name "$SCENARIO_NAME" \
      --arg scenario_type "$SCENARIO_TYPE" \
      --arg owner "$OWNER" \
      --arg engine "$ENGINE" \
      --arg topology "$TOPOLOGY" \
      --arg engine_input "$(echo $ENGINE_INPUT | jq -r '.')" \
      --arg cloud_info "$CLOUD_INFO" \
      --arg pipeline_id "$(System.DefinitionId)" \
      --arg pipeline_name "$(Build.DefinitionName)" \
      --arg cron_schedule_display_name "$BUILD_CRONSCHEDULE_DISPLAYNAME" \
      --arg project_name "$(System.TeamProject)" \
      --arg byo_resources "$SKIP_RESOURCE_MANAGEMENT" \
      '{
          run_id: $run_id,
          timestamp: $timestamp,
          pipeline_info: {
            run_url: $run_url,
            reason: $reason,
            pipeline_branch: $pipeline_branch,
            requester: $requester,
            pipeline_id: $pipeline_id,
            pipeline_name: $pipeline_name,
            cron_schedule_display_name: $cron_schedule_display_name,
            project_name: $project_name,
            code_url: $code_url,
          },
          scenario_info: {
            scenario_name: $scenario_name,
            scenario_type: $scenario_type,
            owner: $owner,
            engine: $engine,
            topology: $topology,
            engine_input: $engine_input,
            byo_resources: $byo_resources
          },
          cloud_info: $cloud_info
      }' | jq 'with_entries(select(.value != null and .value != ""))' | jq -c .)
    echo -n "Telescope Metadata: " && echo "$telescope_metadata" | jq .
    echo "$telescope_metadata" > $TEST_RESULTS_DIR/telescope_metadata.json
    echo "##vso[task.setvariable variable=TELESCOPE_METADATA_FILE]$TEST_RESULTS_DIR/telescope_metadata.json"
  displayName: "Collect Telescope Metadata"
  condition: always()
  env:
    ENGINE: ${{ parameters.engine }}
    TOPOLOGY: ${{ parameters.topology }}
    ENGINE_INPUT: ${{ convertToJson(parameters.engine_input) }}
    CLOUD: ${{ parameters.cloud }}
    REGIONS: ${{ convertToJson(parameters.regions) }}

- script: |
    # Append run_id to the test results file if the file exists
    set -eux
    if [ -f "$(TEST_RESULTS_FILE)" ]; then
      jq --arg telescope_run_id $RUN_ID --arg start_timestamp $START \
      -c '. + {telescope_run_id: $telescope_run_id, start_timestamp: $start_timestamp}' $(TEST_RESULTS_FILE) > temp-$RUN_ID.json \
      && mv temp-$RUN_ID.json $(TEST_RESULTS_FILE)
    else
      echo  "##vso[task.logissue type=warning;]File $(TEST_RESULTS_FILE) does not exist."
    fi
  displayName: "Add RUN_ID to Test Results"
  condition: always()

- ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
  - template: /steps/cloud/azure/upload-storage-account.yml
    parameters:
      source_file_name: $(TELESCOPE_METADATA_FILE)
      destination_file_name: $(RUN_ID).json
      subfolder: telescope-metadata/main
      container_name: system
      credential_type: ${{ parameters.credential_type }}
      cloud: ${{ parameters.cloud }}
      upload_type: "Telescope Metadata"
