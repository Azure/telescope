parameters:
- name: cloud
  type: string
- name: regions
  type: object
- name: terraform_modules_dir
  type: string
  default: ''
- name: terraform_input_file_mapping
  type: object
- name: terraform_user_data_path
  type: string
  default: ''
- name: terraform_arguments
  type: string
  default: ''
- name: terraform_input_varibles
  type: object
  default: {}
- name: retry_attempt_count
  type: number
  default: 3
- name: credential_type
  type: string
  default: managed_identity

steps:
- template: /steps/terraform/set-working-directory.yml
  parameters:
    cloud: ${{ parameters.cloud }}
    modules_dir: ${{ parameters.terraform_modules_dir }}

- template: /steps/terraform/set-input-file.yml
  parameters:
    cloud: ${{ parameters.cloud }}
    regions: ${{ parameters.regions }}
    input_file_mapping: ${{ parameters.terraform_input_file_mapping }}

- template: /steps/terraform/set-user-data-path.yml
  parameters:
    user_data_path: ${{ parameters.terraform_user_data_path }}

- template: /steps/terraform/set-input-variables-${{ parameters.cloud }}.yml@self
  parameters:
    cloud: ${{ parameters.cloud }}
    regions: ${{ parameters.regions }}
    input_variables: ${{ parameters.terraform_input_varibles }}

- script: |
    terraform_input_file=$(echo $TERRAFORM_REGIONAL_CONFIG | jq -r --arg region "$region" '.[$region].TERRAFORM_INPUT_FILE')
    deletion_delay=$(grep "deletion_delay" "$terraform_input_file" | awk -F'=' '{gsub(/^[ \t]+|[ \t]+$/, "", $2); gsub(/[^0-9]/, "", $2); print $2}')
    echo "Deletion Delay: $deletion_delay hr"
    deletion_due_time=$(date -u -d "+${deletion_delay} hour" +'%Y-%m-%dT%H:%M:%SZ')
    echo "Deletion Due Time: $deletion_due_time"
    echo "##vso[task.setvariable variable=DELETION_DUE_TIME]$deletion_due_time"

    owner=$(grep "owner" "$terraform_input_file" | awk -F'=' '{gsub(/^[ \t]+|[ \t]+$/, "", $2); print $2}')
    echo "Owner: $owner"
    echo "##vso[task.setvariable variable=OWNER]$owner"
  displayName: "Get Deletion Due Time and Owner"
  env:
    region: ${{ parameters.regions[0] }}

- script: |
    set -eu
    echo "Create resource group $RUN_ID in region $region"
    az group create --name $RUN_ID --location $region --tags "run_id=$RUN_ID" "scenario=${SCENARIO_TYPE}-${SCENARIO_NAME}" "owner=${OWNER}" "creation_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" "deletion_due_time=${DELETION_DUE_TIME}"
  displayName: "Create Resource Group"
  condition: and(${{ eq(parameters.cloud, 'azure') }}, ne(variables['SKIP_RESOURCE_MANAGEMENT'], 'true'))
  env:
    region: ${{ parameters.regions[0] }}

- template: /steps/terraform/run-command.yml
  parameters:
    command: version
    retry_attempt_count: ${{ parameters.retry_attempt_count }}
    credential_type: ${{ parameters.credential_type }}

- template: /steps/terraform/run-command.yml
  parameters:
    command: init
    retry_attempt_count: ${{ parameters.retry_attempt_count }}
    credential_type: ${{ parameters.credential_type }}

- template: /steps/terraform/run-command.yml
  parameters:
    command: apply
    arguments: ${{ parameters.terraform_arguments }}
    regions: ${{ parameters.regions }}
    cloud: ${{ parameters.cloud }}
    retry_attempt_count: ${{ parameters.retry_attempt_count }}
    credential_type: ${{ parameters.credential_type }}
