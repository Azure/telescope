stages:
- displayName: eastus
  jobs:
  - job: setup
    displayName: Setup resources
    steps:
    - displayName: Set run id
      script: |-
        echo "Run ID: $(Build.BuildId)-$(System.JobId)"
        echo "##vso[task.setvariable variable=RUN_ID]$(Build.BuildId)-$(System.JobId)"
    - displayName: Set Run URL & Code URL
      script: |-
        run_url="$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs&j=$(System.JobId)"
        echo "Run URL: $run_url"
        echo "##vso[task.setvariable variable=RUN_URL]$run_url"

        code_url="$(Build.Repository.Uri)/commit/$(Build.SourceVersion)"
        echo "Code URL: $code_url"
        echo "##vso[task.setvariable variable=CODE_URL]$code_url"
    - displayName: Set Test Results Directory
      script: |-
        test_results_directory=$(Pipeline.Workspace)/s/$(RUN_ID)
        mkdir -p $test_results_directory
        echo "Test Results directory: $test_results_directory"

        test_results_file=$test_results_directory/results.json

        echo "Test Results file: $test_results_file"
        echo "##vso[task.setvariable variable=TEST_RESULTS_FILE]$test_results_file"
    - displayName: Set Script Module Directory
      script: |-
        echo "Script modules directory: $(Pipeline.Workspace)/s/modules/bash"
        echo "##vso[task.setvariable variable=TEST_MODULES_DIR]$(Pipeline.Workspace)/s/modules/bash"
    - displayName: Get login credentials
      task: AzureCLI@2
      inputs:
        azureSubscription: null
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "##vso[task.setvariable variable=SP_CLIENT_ID;issecret=true]$servicePrincipalId"
          echo "##vso[task.setvariable variable=SP_ID_TOKEN;issecret=true]$idToken"
          echo "##vso[task.setvariable variable=TENANT_ID;issecret=true]$tenantId"
        addSpnToEnvironment: 'true'
    - displayName: Azure Login
      script: |
        set -eu

        echo "login to Azure in $REGION"
        az login --service-principal --tenant $(TENANT_ID) -u $(SP_CLIENT_ID) --federated-token $(SP_ID_TOKEN) --allow-no-subscriptions
        az account set --subscription "$AZURE_SP_SUBSCRIPTION_ID"
        az config set defaults.location="$REGION"
        az account show
      env:
        REGION: eastus
        AZURE_SP_SUBSCRIPTION_ID: null
    - displayName: Check Dependencies
      script: |
        python3 --version && pip3 --version
        jq --version
    - displayName: Install Dependencies
      script: |
        set -e
        if [ -f "$(Pipeline.Workspace)/s/modules/python/requirements.txt" ]; then
            pip3 install -r $(Pipeline.Workspace)/s/modules/python/requirements.txt
        fi
        sudo apt-get -y install bc
    - displayName: Generate SSH Key
      script: |-
        set -eu

        ssh_key_path="$(Pipeline.Workspace)/s/modules/terraform/azure/private_key.pem"
        public_key_path="$(Pipeline.Workspace)/s/modules/terraform/azure/private_key.pem.pub"
        ssh-keygen -t rsa -b 2048 -f $ssh_key_path -N "" > /dev/null 2>&1
        chmod 600 $ssh_key_path

        echo "SSH Key Path: $ssh_key_path"
        echo "##vso[task.setvariable variable=SSH_KEY_PATH;]$ssh_key_path"
        echo "Public Key Path: $public_key_path"
        echo "##vso[task.setvariable variable=SSH_PUBLIC_KEY_PATH;]$public_key_path"
    - displayName: Download SSH Key
      script: |-
        set -eu

        echo "Get private key from key vault $AZURE_SSH_KEY_VAULT"
        az keyvault secret download --id $AZURE_SSH_KEY_VAULT --file $SSH_KEY_PATH
        chmod 600 $SSH_KEY_PATH
        cat $SSH_KEY_PATH
        echo "##vso[task.setvariable variable=SSH_KEY_PATH;]${SSH_KEY_PATH}"
      condition: eq(variables['SKIP_RESOURCE_MANAGEMENT'], 'true')
  - job: validate
    displayName: Validate resources
    steps:
    - displayName: Validate SSH Key
      script: |-
        set -eu

        # Check if the private key file exists
        if [ ! -f "$SSH_KEY_PATH" ]; then
            echo "Error: SSH private key not found at $SSH_KEY_PATH"
            exit 1
        fi

        # Check if the private key has the correct permissions
        if [ "$(stat -c %a $SSH_KEY_PATH)" != "600" ]; then
            echo "Error: SSH private key permissions are not set to 600"
            exit 1
        fi

        # Check if the public key file exists
        if [ ! -f "$PUBLIC_KEY_PATH" ]; then
            echo "Error: SSH public key not found at $SSH_PUBLIC_KEY_PATH"
            exit 1
        fi

        echo "SSH key validation passed."
    dependsOn:
    - setup
  - job: run
    displayName: Run the benchmark
    steps: []
    dependsOn:
    - validate
  - job: tear down
    displayName: Tear down resources
    steps: []
    dependsOn:
    - run
