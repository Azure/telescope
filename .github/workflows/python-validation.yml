name: Python Validation

on:
  pull_request:
    paths:
      - 'modules/python/**'

env:
  PYTHON_MODULES_DIR: modules/python
jobs:
  python-validation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Python Version Check
        run: python --version

      - name: Install Python Dependencies
        working-directory: ${{ env.PYTHON_MODULES_DIR }}
        run: pip install -r requirements.txt

      - name: Fetch all branches
        run: git fetch --prune --unshallow

      - name: Run Pylint on changed files
        id: changed-files
        run: |
          # Get list of changed files
          file_changes=$(git diff --name-only --diff-filter=d origin/main HEAD -- '*.py')
          echo "Files changed: $file_changes"
          if [ -z "$file_changes" ]; then
            echo "No Python files were changed."
          else
            pylint $file_changes
          fi
          echo "changed_files=$file_changes" >> $GITHUB_OUTPUT
      - name: Install kwokctl
        if: always()
        run: |
          curl -LO https://github.com/kubernetes-sigs/kwok/releases/latest/download/kwokctl-linux-amd64
          chmod +x kwokctl-linux-amd64
          sudo mv kwokctl-linux-amd64 /usr/local/bin/kwokctl

      - name: Create KWOK cluster
        if: always()
        run: kwokctl create cluster --name kwok-test
      - name: Run Python Tests with Coverage
        if: always()
        working-directory: ${{ env.PYTHON_MODULES_DIR }}
        run: python -m pytest --cov=. --cov-report=term-missing
      - name: Run Python Tests with Per-File Coverage Check for Changed Files
        # This step runs tests with coverage for each changed file in the modules/python directory
        if: always()
        working-directory: ${{ env.PYTHON_MODULES_DIR }}
        run: |         
          # Get changed Python files under modules/python
          changed_py_files=$(git diff --name-only --diff-filter=d origin/main HEAD -- '**/*.py' \
          | grep -v '__init__.py' \
          | sed 's|modules/python/||g' \
          | grep -E '\.py$' || true)

          [ -z "$changed_py_files" ] && echo "No Python files changed in modules/python/" && exit 0

          echo "üîç Checking coverage for changed Python files (threshold: 70%)..."

          all_passed=true
          failed_files=""

          for file in $changed_py_files; do
            module_name=$(echo "$file" | sed 's|/|.|g' | sed 's|\.py$||')
            test_file="tests/$(dirname "$file")/test_$(basename "$file")"

            if [ ! -f "$test_file" ]; then
              echo "‚ö†Ô∏è  No test file found for $file (expected: $test_file)"
              continue
            fi

            echo "‚û°Ô∏è  Logic: $file | Test: $test_file | Module Name: $module_name"
            
            # Run pytest with coverage and capture all output
            output=$(python -m pytest "$test_file" --cov="$module_name" --cov-report=term-missing 2>&1 || true)
            echo "$output"
            
            # Extract coverage percentage more reliably
            pct=$(echo "$output" | grep -E "TOTAL.*[0-9]+%" | tail -n1 | grep -oE '[0-9]+%' | sed 's/%//')
            
            # Check for test failures first
            if echo "$output" | grep -q "FAILED"; then
              failed_count=$(echo "$output" | grep -oE '[0-9]+ failed' | grep -oE '[0-9]+' || echo "0")
              echo "‚ö†Ô∏è  $file - ${failed_count} test(s) failed"
            fi
            
            # Check if coverage is below 70%
            if [ -n "$pct" ] && [ "$pct" -lt 70 ]; then
              echo "‚ùå $file - ${pct}% (FAILED - below 70% threshold)"
              all_passed=false
              failed_files+="$file (${pct}%)\n"
            elif [ -n "$pct" ]; then
              echo "‚úÖ $file - ${pct}% (PASSED)"
            else
              echo "‚ö†Ô∏è  $file - Could not determine coverage percentage"
              # Check if there were any test failures without coverage
              if echo "$output" | grep -q "FAILED"; then
                echo "‚ùå $file - Test failures detected (no coverage data)"
                all_passed=false
                failed_files+="$file (test failures)\n"
              else
                echo "‚ÑπÔ∏è  $file - No test failures but no coverage data found"
              fi
            fi

            echo "----------------------------------------"
          done

          if [ "$all_passed" = false ]; then
            echo -e "\nüö´ Coverage check failed for:\n$failed_files"
            echo "Some files did not meet the 70% coverage threshold or had test failures."
            exit 1
          else
            echo -e "\n‚úÖ All files meet coverage threshold (70%)."
          fi
      - name: Delete KWOK cluster
        if: always()
        run: kwokctl delete cluster --name kwok-test
