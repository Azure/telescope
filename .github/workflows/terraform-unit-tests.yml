name: Terraform Unit tests

on:
  pull_request:

env:
  OWNER: terraform_unit_tests
  AZURE_REGION: eastus
  AWS_REGION: us-east-1
  ZONE: us-east1-b
  MACHINE_TYPE: Standard_D2s_v5
  TERRAFORM_AZURE_MODULES_DIR: modules/terraform/azure
  TERRAFORM_AWS_MODULES_DIR: modules/terraform/aws
jobs:
  Terraform-unit-testing:
    permissions: read-all
    strategy:
      max-parallel: 6
      matrix:
        cloud: [azure, aws]
        scenario_type: [perf-eval]
        scenario_name: [lb-iperf, lb-jmeter, storage-blob, storage-disk, vm-iperf]
        include:
            - cloud: azure
              scenario_type: issue-repro
              scenario_name: lb-tls-error
            - cloud: azure
              scenario_type: issue-repro
              scenario_name: 502-aks-lb-https
    runs-on: ubuntu-latest

    steps:
        - name: Get job id and set env
          run: |
            job_name="Unit testing for (${{ matrix.cloud }}, ${{ matrix.scenario_type }}, ${{ matrix.scenario_name }})"            
            echo "RUN_ID=123456789" >> "$GITHUB_ENV"            
            echo "TERRAFORM_INPUT_FILE=$GITHUB_WORKSPACE/scenarios/${{ matrix.scenario_type }}/${{ matrix.scenario_name }}/terraform-inputs/${{ matrix.cloud }}.tfvars" >> "$GITHUB_ENV"
            echo "USER_DATA_PATH=$GITHUB_WORKSPACE/scenarios/${{ matrix.scenario_type }}/${{ matrix.scenario_name }}/bash-scripts" >> "$GITHUB_ENV"
            
            if [ "${{ matrix.cloud }}" == "azure" ]; then
              echo "TERRAFORM_MODULES_DIR=$TERRAFORM_AZURE_MODULES_DIR" >> "$GITHUB_ENV"
              echo "STORAGE_TIER=Standard" >> "$GITHUB_ENV"
              echo "STORAGE_KIND=BlobStorage" >> "$GITHUB_ENV"
              echo "STORAGE_REPLICATION=LRS" >> "$GITHUB_ENV"
              echo "DATA_DISK_TYPE=Premium_LRS" >> "$GITHUB_ENV"
              echo "DATA_DISK_SIZE_GB=1024" >> "$GITHUB_ENV"
              echo "DATA_DISK_TIER=P30" >> "$GITHUB_ENV"
              echo "DATA_DISK_CACHING=ReadWrite" >> "$GITHUB_ENV"
            else
              echo "TERRAFORM_MODULES_DIR=$TERRAFORM_AWS_MODULES_DIR" >> "$GITHUB_ENV"
              echo "DATA_DISK_TYPE=gp3" >> "$GITHUB_ENV"
              echo "DATA_DISK_SIZE_GB=1024" >> "$GITHUB_ENV"
              echo "DATA_DISK_IOPS_READ_WRITE=3000" >> "$GITHUB_ENV"
              echo "DATA_DISK_MBPS_READ_WRITE=200" >> "$GITHUB_ENV"
            fi
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        - name: Create Azure JSON Input
          if: ${{ matrix.cloud == 'azure' }}
          run: |
            INPUT_JSON_OBJECT=$(jq -n \
            --arg owner "${{ env.OWNER }}" \
            --arg run_id "$RUN_ID" \
            --arg region ${{ env.AZURE_REGION }} \
            --arg machine_type "$MACHINE_TYPE" \
            --arg accelerated_networking false \
            --arg user_data_path "$USER_DATA_PATH" \
            --arg storage_account_tier "$STORAGE_TIER" \
            --arg storage_account_kind "$STORAGE_KIND" \
            --arg storage_account_replication_type "$STORAGE_REPLICATION" \
            --arg data_disk_storage_account_type "$DATA_DISK_TYPE" \
            --arg data_disk_size_gb "$DATA_DISK_SIZE_GB" \
            --arg data_disk_tier "${DATA_DISK_TIER}" \
            --arg data_disk_caching "${DATA_DISK_CACHING}" \
            '{
                owner: $owner, 
                run_id: $run_id, 
                region: $region, 
                machine_type: $machine_type, 
                accelerated_networking: $accelerated_networking, 
                user_data_path: $user_data_path,
                storage_account_tier: $storage_account_tier, 
                storage_account_kind: $storage_account_kind, 
                storage_account_replication_type: $storage_account_replication_type, 
                data_disk_storage_account_type: $data_disk_storage_account_type, 
                data_disk_size_gb: $data_disk_size_gb, 
                data_disk_tier: $data_disk_tier, 
                data_disk_caching: $data_disk_caching,
            }' | jq 'with_entries(select(.value != null and .value != "null" and .value != ""))')
            INPUT_JSON_STRING=$(echo $INPUT_JSON_OBJECT | jq -c .)
            echo "INPUT_JSON=$INPUT_JSON_STRING" >> "$GITHUB_ENV"

        - name: Create AWS JSON Input
          if: ${{ matrix.cloud == 'aws' }}        
          run: |
            INPUT_JSON_OBJECT=$(jq -n \
            --arg owner "${{ env.OWNER }}" \
            --arg run_id "$RUN_ID" \
            --arg region "${{ env.AWS_REGION }}" \
            --arg zone ${{ env.ZONE }} \
            --arg machine_type "$MACHINE_TYPE" \
            --arg accelerated_networking false \
            --arg user_data_path "$USER_DATA_PATH" \
            --arg data_disk_volume_type "$DATA_DISK_TYPE" \
            --arg data_disk_size_gb $DATA_DISK_SIZE_GB \
            --arg data_disk_iops_read_write "$DATA_DISK_IOPS_READ_WRITE" \
            --arg data_disk_mbps_read_write "$DATA_DISK_MBPS_READ_WRITE" \
            '{
                owner: $owner, 
                run_id: $run_id, 
                region: $region,
                zone: $zone, 
                machine_type: $machine_type, 
                accelerated_networking: $accelerated_networking, 
                user_data_path: $user_data_path,
                data_disk_volume_type: $data_disk_volume_type, 
                data_disk_size_gb: $data_disk_size_gb,
                data_disk_iops_read_write: $data_disk_iops_read_write, 
                data_disk_mbps_read_write: $data_disk_mbps_read_write,
            }' | jq 'with_entries(select(.value != null and .value != "null" and .value != ""))')
            INPUT_JSON_STRING=$(echo $INPUT_JSON_OBJECT | jq -c .)
            echo "INPUT_JSON=$INPUT_JSON_STRING" >> "$GITHUB_ENV"

        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Azure login
          if: ${{ matrix.cloud == 'azure' }}
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

        - name: AWS login
          if: ${{ matrix.cloud == 'aws' }}
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.5.6

        - name: Terraform Init
          working-directory: ${{ env.TERRAFORM_MODULES_DIR }}
          run: terraform init

        - name: Terraform Plan 
          working-directory: ${{ env.TERRAFORM_MODULES_DIR }}
          run: terraform plan -var-file "$TERRAFORM_INPUT_FILE" -var="json_input=$INPUT_JSON"
